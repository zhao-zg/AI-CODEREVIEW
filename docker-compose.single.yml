# AI-CodeReview Docker Compose 配置 (单容器简化版)
# 最简单的单服务部署，所有功能集成在一个容器中

services:
  ai-codereview:
    build:
      context: .
      dockerfile: Dockerfile
    image: ghcr.io/zhao-zg/ai-codereview:latest
    container_name: ${AI_CODEREVIEW_CONTAINER_NAME:-ai-codereview}
    restart: unless-stopped
    
    # 端口映射
    ports:
      - "${AI_CODEREVIEW_API_PORT:-5001}:5001"    # Flask API 端口
      - "${AI_CODEREVIEW_UI_PORT:-5002}:5002"     # Streamlit UI 端口
    
    # 卷映射
    volumes:
      # 配置目录映射
      - ./conf:/app/conf
      
      # 数据目录映射（持久化数据）
      - ./data:/app/data
      - ./log:/app/log
      
      # SVN 工作目录映射
      - ./data/svn:/app/data/svn
    
    environment:
      # 基础配置
      - TZ=Asia/Shanghai
      - LOG_LEVEL=INFO
      - PYTHON_ENV=production
      
      # 启用所有功能（内置在api.py中）
      - ENABLE_API=true
      - ENABLE_UI=true
      # 基础配置
      - APP_MODE=single
      
      # 使用内存队列（无需Redis）
      - QUEUE_DRIVER=memory
      
      # Redis 配置（如果使用 RQ 队列）
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    
    # 网络配置
    networks:
      - ai-codereview-network

  # Redis 服务（可选，仅在使用 RQ 队列时需要）
  redis:
    image: redis:7-alpine
    container_name: ${AI_CODEREVIEW_REDIS_CONTAINER_NAME:-ai-codereview-redis}
    restart: unless-stopped
    
    # Redis 配置
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256m
      --maxmemory-policy allkeys-lru
    
    # 数据持久化
    volumes:
      - redis_data:/data
    
    # 网络配置
    networks:
      - ai-codereview-network
    
    # 仅在使用 RQ 队列时启用
    profiles:
      - redis

# 定义数据卷
volumes:
  # Redis 数据卷
  redis_data:
    driver: local

# 网络配置
networks:
  ai-codereview-network:
    name: ai-codereview-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.0/16
